(seq
  (ignore
    (let (x =[(consts ()) (non_consts ([0: [int], [int]]))] [0: 13 37])
      (makeblock 0 x)))
  (let
    (A =
       (apply (field_imm 0 (global CamlinternalMod!))
         [0: "anonymous.ml" 25 6] [0: [0]])
     B =
<<<<<<< HEAD
       (apply (field 0 (global CamlinternalMod!)) [0: "anonymous.ml" 35 6]
         [0: [0]]))
    (seq
      (ignore
        (let (x =[(consts ()) (non_consts ([0: [int], [int]]))] [0: 4 2])
          (makeblock 0 x)))
      (apply (field 1 (global CamlinternalMod!)) [0: [0]] A A)
      (apply (field 1 (global CamlinternalMod!)) [0: [0]] B
        (let (x =[(consts ()) (non_consts ([0: *, *]))] [0: "foo" "bar"])
          (makeblock 0)))
||||||| merged common ancestors
       (apply (field 0 (global CamlinternalMod!)) [0: "anonymous.ml" 35 6]
         [0: [0]]))
    (seq (ignore (let (x = [0: 4 2]) (makeblock 0 x)))
      (apply (field 1 (global CamlinternalMod!)) [0: [0]] A A)
      (apply (field 1 (global CamlinternalMod!)) [0: [0]] B
        (let (x = [0: "foo" "bar"]) (makeblock 0)))
=======
       (apply (field_imm 0 (global CamlinternalMod!))
         [0: "anonymous.ml" 35 6] [0: [0]]))
    (seq (ignore (let (x = [0: 4 2]) (makeblock 0 x)))
      (apply (field_imm 1 (global CamlinternalMod!)) [0: [0]] A A)
      (apply (field_imm 1 (global CamlinternalMod!)) [0: [0]] B
        (let (x = [0: "foo" "bar"]) (makeblock 0)))
>>>>>>> ocaml/5.1
      (setfield_ptr(root-init) 0 (global Anonymous!) A)
      (setfield_ptr(root-init) 1 (global Anonymous!) B)
      (let (f = (function {nlocal = 0} param : int 0))
        (setfield_ptr(root-init) 2 (global Anonymous!) f))
      (let (s = (makemutable 0 ""))
        (setfield_ptr(root-init) 3 (global Anonymous!) s))
      (ignore
        (let
<<<<<<< HEAD
          (*match* =[int]
             (setfield_ptr 0 (field 3 (global Anonymous!)) "Hello World!"))
||||||| merged common ancestors
          (*match* =
             (setfield_ptr 0 (field 3 (global Anonymous!)) "Hello World!"))
=======
          (*match* =
             (setfield_ptr 0 (field_imm 3 (global Anonymous!))
               "Hello World!"))
>>>>>>> ocaml/5.1
          (makeblock 0)))
      (let (drop = (function {nlocal = 0} param : int 0))
        (setfield_ptr(root-init) 4 (global Anonymous!) drop))
      (let
<<<<<<< HEAD
        (*match* =[int]
           (apply (field 4 (global Anonymous!))
             (field_mut 0 (field 3 (global Anonymous!)))))
||||||| merged common ancestors
        (*match* =
           (apply (field 4 (global Anonymous!))
             (field 0 (field 3 (global Anonymous!)))))
=======
        (*match* =
           (apply (field_imm 4 (global Anonymous!))
             (field_mut 0 (field_imm 3 (global Anonymous!)))))
>>>>>>> ocaml/5.1
        0)
      0)))
