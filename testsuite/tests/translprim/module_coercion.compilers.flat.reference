(setglobal Module_coercion!
  (let (M = (makeblock 0))
    (makeblock 0 M
<<<<<<< HEAD
      (makeblock 0
        (function {nlocal = 0} prim[intarray] stub
          ignore assert all zero_alloc : int (array.length[int] prim))
        (function {nlocal = 0} prim[intarray] prim[int] stub
          ignore assert all zero_alloc : int (array.get[int] prim prim))
        (function {nlocal = 0} prim[intarray] prim[int] stub
          ignore assert all zero_alloc : int
          (array.unsafe_get[int] prim prim))
        (function {nlocal = 0} prim[intarray] prim[int] prim[int] stub
          ignore assert all zero_alloc : int (array.set[int] prim prim prim))
        (function {nlocal = 0} prim[intarray] prim[int] prim[int] stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[int] prim prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (compare_ints prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (== prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (!= prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (< prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (> prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (<= prim prim))
        (function {nlocal = 0} prim[int] prim[int] stub
          ignore assert all zero_alloc : int (>= prim prim)))
      (makeblock 0
        (function {nlocal = 0} prim[floatarray] stub
          ignore assert all zero_alloc : int (array.length[float] prim))
        (function {nlocal = 0} prim[floatarray] prim[int] stub
          ignore assert all zero_alloc : float (array.get[float] prim prim))
        (function {nlocal = 0} prim[floatarray] prim[int] stub
          ignore assert all zero_alloc : float
          (array.unsafe_get[float] prim prim))
        (function {nlocal = 0} prim[floatarray] prim[int] prim[float] stub
          ignore assert all zero_alloc : int
          (array.set[float] prim prim prim))
        (function {nlocal = 0} prim[floatarray] prim[int] prim[float] stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[float] prim prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (compare_floats prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (==. prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (!=. prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (<. prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (>. prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (<=. prim prim))
        (function {nlocal = 0} prim[float] prim[float] stub
          ignore assert all zero_alloc : int (>=. prim prim)))
      (makeblock 0
        (function {nlocal = 0} prim[addrarray] stub
          ignore assert all zero_alloc : int (array.length[addr] prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc (array.get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc (array.unsafe_get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim stub
          ignore assert all zero_alloc : int
          (array.set[addr] prim prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[addr] prim prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_compare prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_equal prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_notequal prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_lessthan prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_greaterthan prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_lessequal prim prim))
        (function {nlocal = 0} prim prim stub ignore assert all zero_alloc
          : int (caml_string_greaterequal prim prim)))
      (makeblock 0
        (function {nlocal = 0} prim[addrarray] stub
          ignore assert all zero_alloc : int (array.length[addr] prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : int32 (array.get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : int32
          (array.unsafe_get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[int32] stub
          ignore assert all zero_alloc : int
          (array.set[addr] prim prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[int32] stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[addr] prim prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (compare_bints int32 prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.== prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.!= prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.< prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.> prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.<= prim prim))
        (function {nlocal = 0} prim[int32] prim[int32] stub
          ignore assert all zero_alloc : int (Int32.>= prim prim)))
      (makeblock 0
        (function {nlocal = 0} prim[addrarray] stub
          ignore assert all zero_alloc : int (array.length[addr] prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : int64 (array.get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : int64
          (array.unsafe_get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[int64] stub
          ignore assert all zero_alloc : int
          (array.set[addr] prim prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[int64] stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[addr] prim prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (compare_bints int64 prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.== prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.!= prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.< prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.> prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.<= prim prim))
        (function {nlocal = 0} prim[int64] prim[int64] stub
          ignore assert all zero_alloc : int (Int64.>= prim prim)))
      (makeblock 0
        (function {nlocal = 0} prim[addrarray] stub
          ignore assert all zero_alloc : int (array.length[addr] prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : nativeint
          (array.get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] stub
          ignore assert all zero_alloc : nativeint
          (array.unsafe_get[addr] prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[nativeint] stub
          ignore assert all zero_alloc : int
          (array.set[addr] prim prim prim))
        (function {nlocal = 0} prim[addrarray] prim[int] prim[nativeint] stub
          ignore assert all zero_alloc : int
          (array.unsafe_set[addr] prim prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int
          (compare_bints nativeint prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.== prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.!= prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.< prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.> prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.<= prim prim))
        (function {nlocal = 0} prim[nativeint] prim[nativeint] stub
          ignore assert all zero_alloc : int (Nativeint.>= prim prim))))))
||||||| merged common ancestors
      (module-defn(M_int) Module_coercion module_coercion.ml(46):1552-1591
        (makeblock 0 (function prim stub (array.length[int] prim))
          (function prim prim stub (array.get[int] prim prim))
          (function prim prim stub (array.unsafe_get[int] prim prim))
          (function prim prim prim stub (array.set[int] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[int] prim prim prim))
          (function prim prim stub (compare_ints prim prim))
          (function prim prim stub (== prim prim))
          (function prim prim stub (!= prim prim))
          (function prim prim stub (< prim prim))
          (function prim prim stub (> prim prim))
          (function prim prim stub (<= prim prim))
          (function prim prim stub (>= prim prim))))
      (module-defn(M_float) Module_coercion module_coercion.ml(47):1594-1637
        (makeblock 0 (function prim stub (array.length[float] prim))
          (function prim prim stub (array.get[float] prim prim))
          (function prim prim stub (array.unsafe_get[float] prim prim))
          (function prim prim prim stub (array.set[float] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[float] prim prim prim))
          (function prim prim stub (compare_floats prim prim))
          (function prim prim stub (==. prim prim))
          (function prim prim stub (!=. prim prim))
          (function prim prim stub (<. prim prim))
          (function prim prim stub (>. prim prim))
          (function prim prim stub (<=. prim prim))
          (function prim prim stub (>=. prim prim))))
      (module-defn(M_string) Module_coercion module_coercion.ml(48):1640-1685
        (makeblock 0 (function prim stub (array.length[addr] prim))
          (function prim prim stub (array.get[addr] prim prim))
          (function prim prim stub (array.unsafe_get[addr] prim prim))
          (function prim prim prim stub (array.set[addr] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[addr] prim prim prim))
          (function prim prim stub (caml_string_compare prim prim))
          (function prim prim stub (caml_string_equal prim prim))
          (function prim prim stub (caml_string_notequal prim prim))
          (function prim prim stub (caml_string_lessthan prim prim))
          (function prim prim stub (caml_string_greaterthan prim prim))
          (function prim prim stub (caml_string_lessequal prim prim))
          (function prim prim stub (caml_string_greaterequal prim prim))))
      (module-defn(M_int32) Module_coercion module_coercion.ml(49):1688-1731
        (makeblock 0 (function prim stub (array.length[addr] prim))
          (function prim prim stub (array.get[addr] prim prim))
          (function prim prim stub (array.unsafe_get[addr] prim prim))
          (function prim prim prim stub (array.set[addr] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[addr] prim prim prim))
          (function prim prim stub (compare_bints int32 prim prim))
          (function prim prim stub (Int32.== prim prim))
          (function prim prim stub (Int32.!= prim prim))
          (function prim prim stub (Int32.< prim prim))
          (function prim prim stub (Int32.> prim prim))
          (function prim prim stub (Int32.<= prim prim))
          (function prim prim stub (Int32.>= prim prim))))
      (module-defn(M_int64) Module_coercion module_coercion.ml(50):1734-1777
        (makeblock 0 (function prim stub (array.length[addr] prim))
          (function prim prim stub (array.get[addr] prim prim))
          (function prim prim stub (array.unsafe_get[addr] prim prim))
          (function prim prim prim stub (array.set[addr] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[addr] prim prim prim))
          (function prim prim stub (compare_bints int64 prim prim))
          (function prim prim stub (Int64.== prim prim))
          (function prim prim stub (Int64.!= prim prim))
          (function prim prim stub (Int64.< prim prim))
          (function prim prim stub (Int64.> prim prim))
          (function prim prim stub (Int64.<= prim prim))
          (function prim prim stub (Int64.>= prim prim))))
      (module-defn(M_nativeint) Module_coercion module_coercion.ml(51):1780-1831
        (makeblock 0 (function prim stub (array.length[addr] prim))
          (function prim prim stub (array.get[addr] prim prim))
          (function prim prim stub (array.unsafe_get[addr] prim prim))
          (function prim prim prim stub (array.set[addr] prim prim prim))
          (function prim prim prim stub
            (array.unsafe_set[addr] prim prim prim))
          (function prim prim stub (compare_bints nativeint prim prim))
          (function prim prim stub (Nativeint.== prim prim))
          (function prim prim stub (Nativeint.!= prim prim))
          (function prim prim stub (Nativeint.< prim prim))
          (function prim prim stub (Nativeint.> prim prim))
          (function prim prim stub (Nativeint.<= prim prim))
          (function prim prim stub (Nativeint.>= prim prim)))))))
=======
      (makeblock 0 (function prim stub (array.length[int] prim))
        (function prim prim stub (array.get[int] prim prim))
        (function prim prim stub (array.unsafe_get[int] prim prim))
        (function prim prim prim stub (array.set[int] prim prim prim))
        (function prim prim prim stub (array.unsafe_set[int] prim prim prim))
        (function prim prim stub (compare_ints prim prim))
        (function prim prim stub (== prim prim))
        (function prim prim stub (!= prim prim))
        (function prim prim stub (< prim prim))
        (function prim prim stub (> prim prim))
        (function prim prim stub (<= prim prim))
        (function prim prim stub (>= prim prim)))
      (makeblock 0 (function prim stub (array.length[float] prim))
        (function prim prim stub (array.get[float] prim prim))
        (function prim prim stub (array.unsafe_get[float] prim prim))
        (function prim prim prim stub (array.set[float] prim prim prim))
        (function prim prim prim stub
          (array.unsafe_set[float] prim prim prim))
        (function prim prim stub (compare_floats prim prim))
        (function prim prim stub (==. prim prim))
        (function prim prim stub (!=. prim prim))
        (function prim prim stub (<. prim prim))
        (function prim prim stub (>. prim prim))
        (function prim prim stub (<=. prim prim))
        (function prim prim stub (>=. prim prim)))
      (makeblock 0 (function prim stub (array.length[addr] prim))
        (function prim prim stub (array.get[addr] prim prim))
        (function prim prim stub (array.unsafe_get[addr] prim prim))
        (function prim prim prim stub (array.set[addr] prim prim prim))
        (function prim prim prim stub
          (array.unsafe_set[addr] prim prim prim))
        (function prim prim stub (caml_string_compare prim prim))
        (function prim prim stub (caml_string_equal prim prim))
        (function prim prim stub (caml_string_notequal prim prim))
        (function prim prim stub (caml_string_lessthan prim prim))
        (function prim prim stub (caml_string_greaterthan prim prim))
        (function prim prim stub (caml_string_lessequal prim prim))
        (function prim prim stub (caml_string_greaterequal prim prim)))
      (makeblock 0 (function prim stub (array.length[addr] prim))
        (function prim prim stub (array.get[addr] prim prim))
        (function prim prim stub (array.unsafe_get[addr] prim prim))
        (function prim prim prim stub (array.set[addr] prim prim prim))
        (function prim prim prim stub
          (array.unsafe_set[addr] prim prim prim))
        (function prim prim stub (compare_bints int32 prim prim))
        (function prim prim stub (Int32.== prim prim))
        (function prim prim stub (Int32.!= prim prim))
        (function prim prim stub (Int32.< prim prim))
        (function prim prim stub (Int32.> prim prim))
        (function prim prim stub (Int32.<= prim prim))
        (function prim prim stub (Int32.>= prim prim)))
      (makeblock 0 (function prim stub (array.length[addr] prim))
        (function prim prim stub (array.get[addr] prim prim))
        (function prim prim stub (array.unsafe_get[addr] prim prim))
        (function prim prim prim stub (array.set[addr] prim prim prim))
        (function prim prim prim stub
          (array.unsafe_set[addr] prim prim prim))
        (function prim prim stub (compare_bints int64 prim prim))
        (function prim prim stub (Int64.== prim prim))
        (function prim prim stub (Int64.!= prim prim))
        (function prim prim stub (Int64.< prim prim))
        (function prim prim stub (Int64.> prim prim))
        (function prim prim stub (Int64.<= prim prim))
        (function prim prim stub (Int64.>= prim prim)))
      (makeblock 0 (function prim stub (array.length[addr] prim))
        (function prim prim stub (array.get[addr] prim prim))
        (function prim prim stub (array.unsafe_get[addr] prim prim))
        (function prim prim prim stub (array.set[addr] prim prim prim))
        (function prim prim prim stub
          (array.unsafe_set[addr] prim prim prim))
        (function prim prim stub (compare_bints nativeint prim prim))
        (function prim prim stub (Nativeint.== prim prim))
        (function prim prim stub (Nativeint.!= prim prim))
        (function prim prim stub (Nativeint.< prim prim))
        (function prim prim stub (Nativeint.> prim prim))
        (function prim prim stub (Nativeint.<= prim prim))
        (function prim prim stub (Nativeint.>= prim prim))))))
>>>>>>> ocaml/5.1
