(setglobal Functors!
  (let
    (O =
<<<<<<< HEAD
       (function {nlocal = 0} X is_a_functor always_inline
         ignore assert all zero_alloc never_loop
||||||| merged common ancestors
       (module-defn(O) Functors functors.ml(12):184-279
         (function X is_a_functor always_inline
           (let
             (cow = (function x[int] : int (apply (field 0 X) x))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 cow sheep))))
     F =
       (module-defn(F) Functors functors.ml(17):281-392
         (function X Y is_a_functor always_inline
           (let
             (cow =
                (function x[int] : int
                  (apply (field 0 Y) (apply (field 0 X) x)))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 cow sheep))))
     F1 =
       (module-defn(F1) Functors functors.ml(31):516-632
         (function X Y is_a_functor always_inline
           (let
             (sheep =
                (function x[int] : int
                  (+ 1 (apply (field 0 Y) (apply (field 0 X) x)))))
             (makeblock 0 sheep))))
     F2 =
       (module-defn(F2) Functors functors.ml(36):634-784
         (function X Y is_a_functor always_inline
           (let
             (X =a (makeblock 0 (field 1 X))
              Y =a (makeblock 0 (field 1 Y))
              sheep =
                (function x[int] : int
                  (+ 1 (apply (field 0 Y) (apply (field 0 X) x)))))
             (makeblock 0 sheep))))
     M =
       (module-defn(M) Functors functors.ml(41):786-970
=======
       (function X is_a_functor always_inline
>>>>>>> ocaml/5.1
         (let
<<<<<<< HEAD
           (cow = (function {nlocal = 0} x[int] : int (apply (field 0 X) x))
            sheep = (function {nlocal = 0} x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 cow sheep)))
     F =
       (function {nlocal = 0} X Y is_a_functor always_inline
         ignore assert all zero_alloc never_loop
         (let
           (cow =
              (function {nlocal = 0} x[int] : int
                (apply (field 0 Y) (apply (field 0 X) x)))
            sheep = (function {nlocal = 0} x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 cow sheep)))
     F1 =
       (function {nlocal = 0} X Y is_a_functor always_inline
         ignore assert all zero_alloc never_loop
         (let
           (cow =
              (function {nlocal = 0} x[int] : int
                (apply (field 0 Y) (apply (field 0 X) x)))
            sheep = (function {nlocal = 0} x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 sheep)))
     F2 =
       (function {nlocal = 0} X Y is_a_functor always_inline
         ignore assert all zero_alloc never_loop
         (let
           (X =a (makeblock 0 (field 1 X))
            Y =a (makeblock 0 (field 1 Y))
            cow =
              (function {nlocal = 0} x[int] : int
                (apply (field 0 Y) (apply (field 0 X) x)))
            sheep = (function {nlocal = 0} x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 sheep)))
     M =
       (let
         (F =
            (function {nlocal = 0} X Y is_a_functor always_inline
              ignore assert all zero_alloc never_loop
              (let
                (cow =
                   (function {nlocal = 0} x[int] : int
                     (apply (field 0 Y) (apply (field 0 X) x)))
                 sheep =
                   (function {nlocal = 0} x[int] : int (+ 1 (apply cow x))))
                (makeblock 0 cow sheep))))
         (makeblock 0
           (function {nlocal = 0} funarg funarg is_a_functor stub
             ignore assert all zero_alloc
             (let
               (let =
                  (apply F (makeblock 0 (field 1 funarg))
                    (makeblock 0 (field 1 funarg))))
               (makeblock 0 (field 1 let)))))))
||||||| merged common ancestors
           (F =
              (module-defn(F) Functors.M functors.ml(44):849-966
                (function X Y is_a_functor always_inline
                  (let
                    (cow =
                       (function x[int] : int
                         (apply (field 0 Y) (apply (field 0 X) x)))
                     sheep = (function x[int] : int (+ 1 (apply cow x))))
                    (makeblock 0 cow sheep)))))
           (makeblock 0
             (function funarg funarg is_a_functor stub
               (let
                 (let =
                    (apply F (makeblock 0 (field 1 funarg))
                      (makeblock 0 (field 1 funarg))))
                 (makeblock 0 (field 1 let))))))))
=======
           (cow = (function x[int] : int (apply (field_imm 0 X) x))
            sheep = (function x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 cow sheep)))
     F =
       (function X Y is_a_functor always_inline
         (let
           (cow =
              (function x[int] : int
                (apply (field_imm 0 Y) (apply (field_imm 0 X) x)))
            sheep = (function x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 cow sheep)))
     F1 =
       (function X Y is_a_functor always_inline
         (let
           (cow =
              (function x[int] : int
                (apply (field_imm 0 Y) (apply (field_imm 0 X) x)))
            sheep = (function x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 sheep)))
     F2 =
       (function X Y is_a_functor always_inline
         (let
           (X =a (makeblock 0 (field_mut 1 X))
            Y =a (makeblock 0 (field_mut 1 Y))
            cow =
              (function x[int] : int
                (apply (field_imm 0 Y) (apply (field_imm 0 X) x)))
            sheep = (function x[int] : int (+ 1 (apply cow x))))
           (makeblock 0 sheep)))
     M =
       (let
         (F =
            (function X Y is_a_functor always_inline
              (let
                (cow =
                   (function x[int] : int
                     (apply (field_imm 0 Y) (apply (field_imm 0 X) x)))
                 sheep = (function x[int] : int (+ 1 (apply cow x))))
                (makeblock 0 cow sheep))))
         (makeblock 0
           (function funarg funarg is_a_functor stub
             (let
               (let =
                  (apply F (makeblock 0 (field_mut 1 funarg))
                    (makeblock 0 (field_mut 1 funarg))))
               (makeblock 0 (field_mut 1 let)))))))
>>>>>>> ocaml/5.1
    (makeblock 0 O F F1 F2 M)))
